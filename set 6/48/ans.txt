We can first attempt to have the string const ***p3 receive the value of a string ***ptr.

void triple(string const ***ptr)
{
    string **ppncs;               // (1)
    string const ***p3 = &ppncs;  // (2)
    **p3 = **ptr;                 // (3)

    **ppncs = "42";               // (4)
}

(1) We first create a pointer to a pointer to a non-constant string. 
(2) We try to create a pointer to a pointer to a pointer to a constant string from it, using the address of the double pointer for (1) (we assume this is possible for the sake of the example).
(3) We assign p3's second pointer value to ptr's second pointer value. Both triple pointers now point at the string at the end of ppncs. 
(4) we try to change the value of **ppncs. Since this was not a constant string it is possible to do. However, it violates the fact that ptr should be a triple pointer to a constant string. 

We get the following error when compiling the program:

error: invalid conversion from ‘std::string***’ {aka ‘std::__cxx11::basic_string<char>***’} to ‘const std::string***’ {aka ‘const std::__cxx11::basic_string<char>***’} [-fpermissive]

This means string const ***p3 indeed cannot receive the value of a string ***ptr. We can, however, correct the function in the following way. 

void triple(string const ***ptr)
{
    string const **ppcs;         // (5)
    string const ***p3 = &ppcs;  // (6)
    **p3 = **ptr;                // (7)
}

(5) In contrast to the previous example, we first create a pointer to a pointer to a constant string.
(6) We create a pointer to a pointer to a pointer to a constant string using the address of the double pointer in (5).
(7) We assign p3's second pointer value to ptr's second pointer value. Both triple pointers now point at the string at the const end of ppcs, which does not cause any errors as the types stay intact. 

Note that since we know that a string const value cannot be changed, we do not even attempt it as we did in the previous example. 
